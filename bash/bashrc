# File:   bashrc
# Author: Shoichi Aizawa <shoichiaizawa@gmail.com>
# Source: https://github.com/shoichiaizawa/dotfiles/tree/master/bash/bashrc

# TODO: Organise the bashrc settings for code visibility.
#
#       It is just so cluttering at the moment. Modularise this file into
#       multiple separate files if necessary;
#       for instance:
#
#         - aliases
#         - bash_prompt
#         - path
#         - functions
#         - etc

export MYNAME='Shoichi Aizawa'
export LESS='-iMR'
[ -x $(brew --prefix)/bin/src-hilite-lesspipe.sh ] && \
export LESSOPEN='| $(brew --prefix)/bin/src-hilite-lesspipe.sh %s'

export VISUAL=vim
export EDITOR="$VISUAL"

################################################################################
# PATH Settings                                                                #
################################################################################

export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
[ -d ~/.composer/vendor/bin ] && export PATH=$PATH:~/.composer/vendor/bin
[ -d $(brew --prefix)/opt/android-sdk ] && \
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
[ -d $(brew --prefix)/share/git-core/contrib/diff-highlight ] && \
export PATH=$PATH:$(brew --prefix)/share/git-core/contrib/diff-highlight

################################################################################
# History Settings                                                             #
################################################################################

# Append history to `~/.bash_history` when you exit a shell
shopt -s histappend
export HISTSIZE=32768              # Save 32³ items in history (default 500)
export HISTFILESIZE=1000000
export HISTTIMEFORMAT='%F %T -- '  # yyyy-mm-dd HH:MM:SS -- command
export HISTCONTROL=ignoreboth:erasedups  # ignoredups:ignorespace:erasedups
export HISTIGNORE='&:[ 　	]*:?:??'
export HISTIGNORE=$HISTIGNORE':history:pwd:pdw:exit:eixt:quit:du1'
export HISTIGNORE=$HISTIGNORE':la1:l1a:lal:lla:l.l:ll.:lll:ls -la'
export HISTIGNORE=$HISTIGNORE':clear:histg:hgrep'

################################################################################
# Command Prompt Configuration                                                 #
################################################################################

# TODO: See what other people do for their command prompt configuration: dotfiles-mathiasbynens/, dotfiles-questbeat/, dotfiles-tpope/, dotfiles-yonchu/ etc

# Load the shell dotfiles:
# for file in ~/.bash/{bash_prompt}; do
#   [ -r "$file" ] && [ -f "$file" ] && source "$file";
# done;
# unset file;

source ~/.bash/bash_prompt  # temp one-liner to source the prompt file as script above is not working.

#export PS1='\u\[\033[00m\]:\W\[\033[31m\]$(__git_ps1 [%s])\[\033[00m\]\$ '
# Command Prompt Configuration Help {{{1
#
# | Code       | Command Prompt Output                              |
# |------------|----------------------------------------------------|
# | \u         | username                                           |
# | \s         | current shell                                      |
# | \w         | current working directory                          |
# | \W         | basename of current working directory              |
# | \d         | date in "weekday month date" format ("Mon Jan 16") |
# | \D(format) | date in strfime format ("%Y-%m-%d")                |
# | \A         | time in 24-hour HH:MM format                       |
# | \t         | time in 24-hour HH:MM:SS format                    |
# | \@         | time in 12-hour HH:MM am/pm format                 |
# | \T         | time in 12-hour HH:MM:SS format                    |
# | \H         | hostname                                           |
# | \h         | hostname up to first "."                           |
# | \!         | history number if this command                     |
# | \$         | when UID is 0 (root), a "#", otherwise a "$"       |
# | \\         | a literal backslash                                |
#
# }}}1

################################################################################
# Grep                                                                         #
################################################################################

# GREP_COLOR Codes Help {{{1
#
# ANSI escape code:
#
# | SGR parameters      | Text colour | Background |
# |---------------------|-------------|------------|
# | 0 reset all         | 30 black    | 40 black   |
# | 1 bright            | 31 red      | 41 red     |
# | 2 dim               | 32 green    | 42 green   |
# | 3 italic            | 33 yellow   | 43 yellow  |
# | 4 underline: single | 34 blue     | 44 blue    |
# | 5 blink: slow       | 35 magenta  | 45 magenta |
# | 6 blink: fast       | 36 cyan     | 46 cyan    |
# | 7 reverse           | 37 white    | 47 white   |
# | 8 hidden            |     ---     |     ---    |
# | many more up to 107 |     ---     |     ---    |
#
# Separate with ";"
#
# Many of SGR parameters are not widely supported.
# See Wikipedia and elsewhere for details:
# https://en.wikipedia.org/wiki/ANSI_escape_code
#
# }}}1

export GREP_OPTIONS='--color=auto'  # Specify options grep should use by default
export GREP_COLOR='1;38;5;0;48;5;136'

################################################################################
# Terminal Color Formatting                                                    #
################################################################################

# TODO: Work on better colour formatting than the current settings
#GIT_PS1_SHOWDIRTYSTATE=true
export CLICOLOR=1
export LS_OPTIONS='--color=auto'
               #1122334455667788990011 -- column numbers for attributes
export LSCOLORS=GxFxCxDxBxegedabagaced
# export LSCOLORS=GxBxHxDxFxhxhxhxhxexex   # previous color formatting

# Color Formatting Help {{{1
#
# The color designators are as follows:         The order of the attributes are as follows:
# a black                                       1. directory
# b red                                         2. symbolic link
# c green                                       3. socket
# d brown                                       4. pipe
# e blue                                        5. executable
# f magenta                                     6. block special
# g cyan                                        7. character special
# h light grey                                  8. executable with setuid bit set
# A bold black, usually shows up as dark grey   9. executable with setgid bit set
# B bold red                                    10. directory writable to others, with sticky bit
# C bold green                                  11. directory writable to others, without sticky bit
# D bold brown, usually shows up as yellow
# E bold blue
# F bold magenta
# G bold cyan
# H bold light grey; looks like bright white
# x default foreground or background
#
# }}}1

################################################################################
# Completions                                                                  #
################################################################################

# ---------------
# Bash completion
# ---------------

# Add tab completion for many Bash commands
if type brew &> /dev/null && [ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ]; then
  # Ensure existing Homebrew v1 completions continue to work
  export BASH_COMPLETION_COMPAT_DIR="$(brew --prefix)/etc/bash_completion.d"
  source "$(brew --prefix)/etc/profile.d/bash_completion.sh"
  source "$(brew --prefix)/etc/bash_completion.d/git-completion.bash"  # FIXME: temporary solution
elif [ -f /etc/bash_completion ]; then
  source /etc/bash_completion
fi

# ---------------------
# ssh config completion
# ---------------------

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# --------------
# wting/autojump
# --------------
#
# Add the path for wting/autojump to Bash
# [[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh

# ------
# rupa/z
# ------
#
# Add the path for rupa/z
[[ -s $(brew --prefix)/etc/profile.d/z.sh ]] && . $(brew --prefix)/etc/profile.d/z.sh

# -----------------------------
# Git completion with `g` alias
# -----------------------------
#
# Enable tab completion for `g` by marking it as an alias for `git`
# https://github.com/mathiasbynens/dotfiles/blob/main/.bash_profile#L37-L40
if type _git &> /dev/null; then
  complete -o default -o nospace -F _git g;
fi;

# --------------------------------------
# brew cask completion with `cask` alias
# --------------------------------------
#
# Enable tab completion for `cask` by marking it as an alias for `brew cask`
# Inspired by the above script by mathiasbynens :D
#
if type _brew_cask &> /dev/null; then
  complete -o default -o nospace -F _brew_cask cask
fi

# --------------------------------------------
# Vagrant completion with `homestead` function
# --------------------------------------------

# Dependency:
#   - Vagrant            -> Run `brew cask install vagrant`
#   - vagrant-completion -> Run `brew install vagrant-completion`
#   - Homestead          -> Run `cd ~ && git clone https://github.com/laravel/homestead.git Homestead`

if type vagrant > /dev/null 2>&1 && [ -d ~/Homestead ]; then
  # Accessing Homestead Globally
  # See: https://laravel.com/docs/master/homestead#accessing-homestead-globally
  function homestead() {
    ( cd ~/Homestead && vagrant $* )
  }

  # Enable tab completion for the `homestead` function defined above
  if [ -f $(brew --prefix)/etc/bash_completion.d/vagrant ]; then
    complete -o default -o nospace -F _vagrant homestead
  fi
fi

# --------------------------------------
# killall tab completion for common apps
# --------------------------------------
#
# Add `killall` tab completion for common apps
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_profile#L47
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter ScriptMonitor NotificationCenter" killall;

# ------------------------------------------------------------------
# Completion for Composer -- PHP package manager
# [Requirements]
# Composer: `tap homebrew/php && brew install composer`
# ------------------------------------------------------------------
#
# https://github.com/stecman/composer-bash-completion-plugin
# https://github.com/stecman/symfony-console-completion
#
# Modified version of what `composer _completion -g -p composer` generates
# Composer will only load plugins when a valid composer.json is in its working
# directory, so for this hack to work, we are always running the completion
# command in ~/.composer
function _composercomplete {
  export COMP_LINE COMP_POINT COMP_WORDBREAKS;
  local -x COMPOSER_CWD=`pwd`
  local RESULT STATUS

  # Honour the COMPOSER_HOME variable if set
  local composer_dir=$COMPOSER_HOME
  if [ -z "$composer_dir" ]; then
    composer_dir=$HOME/.composer
  fi

  RESULT=`cd $composer_dir && composer depends _completion`;
  STATUS=$?;

  if [ $STATUS -ne 0 ]; then
    echo $RESULT;
    return $?;
  fi;

  local cur;
  _get_comp_words_by_ref -n : cur;

  COMPREPLY=(`compgen -W "$RESULT" -- $cur`);

  __ltrim_colon_completions "$cur";
};

complete -F _composercomplete composer;

# -----------------------------
# Bash completion for Terraform
# -----------------------------

if type brew > /dev/null 2>&1 && type terraform > /dev/null 2>&1; then
  complete -C $(brew --prefix)/opt/terraform/bin/terraform terraform
fi

################################################################################
# Python                                                                       #
################################################################################

# -----------------------------
# Python Interpreter completion
# -----------------------------
#
# Enable tab completion for the Python Interactive Interpreter:
# https://stackoverflow.com/questions/246725/how-do-i-add-tab-completion-to-the-python-shell
# https://nicolas.perriault.net/code/2010/python-tab-completion/
# File: ~/.pythonrc.py@ -> ~/Dropbox/code/dotfiles/pythonrc.py
export PYTHONSTARTUP=$HOME/.pythonrc.py

################################################################################
# Java                                                                         #
################################################################################

# ----
# Java
# ----

export SDKMAN_DIR="$HOME/.sdkman"

if [ -d $SDKMAN_DIR ]; then
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
else
  unset SDKMAN_DIR
  export JAVA_HOME=$(/usr/libexec/java_home)
fi

# -------
# Android
# -------

export STUDIO_JDK=${JAVA_HOME%/*/*} # Same as below
# export STUDIO_JDK=/Library/Java/JavaVirtualMachines/jdk1.8.0_xxx.jdk

[ -d $(brew --prefix)/opt/android-sdk ] && \
export ANDROID_HOME=$(brew --prefix)/opt/android-sdk  # Homebrew version
# export ANDROID_HOME=~/Library/Android/sdk/      # Android Studio default

################################################################################
# Alias Settings                                                               #
################################################################################

# Enable simple aliases to be sudo'ed. ("sudone"?)
# http://www.gnu.org/software/bash/manual/bashref.html#Aliases says: "If the
# last character of the alias value is a space or tab character, then the next
# command word following the alias is also checked for alias expansion."
# Related answers from Stack Exchange:
# http://askubuntu.com/questions/22037/aliases-not-available-when-using-sudo
alias sudo='sudo '

set -o noclobber          # Prevent unintentional overwriting
# set -o vi                 # Set Vi Mode in Bash
shopt -s nocaseglob       # Case-insensitive globbing (used in pathname expansion)
shopt -s cdspell          # Autocorrect minor typos in path names when using `cd`
shopt -s dirspell
shopt -s no_empty_cmd_completion
shopt -s autocd
shopt -s cdable_vars

# ------
# SAFETY
# ------

alias rm='rm -iv'         # interactive, verbose
alias mv='mv -iv'         # interactive, verbose
alias cp='cp -iv'         # interactive, verbose
alias ln='ln -iv'         # interactive, verbose

# -----------------------------------------------------------------
# ls aliases
# -----------------------------------------------------------------
# Notes for ls option flags:
#
# -a: Show dotfiles
# -l: List in long format
# -r: Reverse the order of the sorts:
# -t: Sort by time modified
# -h: Show file size in human-readable format
# -F: Show a symbol after each pathname
# i.e. directory/, executable*, symlink@, socket=, whiteout%, FIFO|
# -----------------------------------------------------------------

# Detect which `ls` flavour is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
  colorflag='--color'
else # macOS `ls`
  colorflag='-G'
fi

if type lsd > /dev/null 2>&1; then
  alias ls='lsd -F'
  alias sym="ls -al | grep '⇒ '"         # List all symlinks
else
  alias ls='ls -hF ${colorflag}'          # Default human-readable & symbol after pathname
  alias l.='ls -d .*'                     # List all dotfiles
  alias l.l='ls -ld .*'                   # List all dotfiles in long format
  alias ll.=l.l
  alias sym="ls -al | grep '\->'"         # List all symlinks
fi

alias l1='ls -1'                        # List all files per line
alias l='ls -l'                         # List all files in long format
alias la='ls -a'                        # List all files, including dotfiles
alias la1='ls -a1'                      # List all files per line, including dotfiles
alias l1a=la1                           # List all files per line, including dotfiles
alias lal='ls -al'                      # List all files in long format, including dotfiles
alias lla=lal
alias ll='ls -alrthF'                  # List all files in detail
alias lll=ll

# -----------------------------------
# tree (requires `brew install tree`)
# -----------------------------------

if type tree > /dev/null 2>&1; then
  alias tree='tree -CF'
  alias tree1='tree -L 1'
  alias tree2='tree -L 2'
  alias tree3='tree -L 3'
  alias tree4='tree -L 4'
  alias tree5='tree -L 5'
  alias tree6='tree -L 6'
  alias treea='tree -a'
  alias treea1='tree -a -L 1'
  alias treea2='tree -a -L 2'
  alias treea3='tree -a -L 3'
  alias treea4='tree -a -L 4'
  alias treea5='tree -a -L 5'
  alias treea6='tree -a -L 6'
  alias tree.=treea
  alias tree.1=treea1
  alias tree.2=treea2
  alias tree.3=treea3
  alias tree.4=treea4
  alias tree.5=treea5
  alias tree.6=treea6
  alias trls='tree -CF | less -R'  # -C outputs colour, -R makes less understand color
fi

# ---------
# df and du
# ---------

alias df='df -H'                        # Human-readable using base 10
alias du='du -ch'                       # Human-readable including grand total
alias du1='du -d 1'                     # Human-readable, grand total, min-level
alias dus='du -sckx * | sort -nr'

# ----
# less
# ----

alias lessn='less -N'                   # lessn:    Show the linenumber
alias m='less'                          # m:        Show less output
alias mn='less -N'                      # mn:       Show the position & linenumbers

# --
# cd
# --

# Enable `cd filename` to move to its parent directory
cd() {
  if [ -e "$1" -a ! -d "$1" ]; then
    builtin cd -- "$(dirname -- "$1")"
  else
    builtin cd "$@"
  fi
}

alias cd..='cd ../'                     # Go back 1 directory level
alias c..='cd ..'                       # Go back 1 directory level
alias ..='cd ../'                       # Go back 1 directory level
alias ...='cd ../../'                   # Go back 2 directory levels
alias ....='cd ../../../'               # Go back 3 directory levels
alias .....='cd ../../../../'           # Go back 4 directory levels
alias ......='cd ../../../../../'       # Go back 5 directory levels
alias .......='cd ../../../../../../'   # Go back 6 directory levels
alias .3='cd ../../../'                 # Go back 3 directory levels
alias .4='cd ../../../../'              # Go back 4 directory levels
alias .5='cd ../../../../../'           # Go back 5 directory levels
alias .6='cd ../../../../../../'        # Go back 6 directory levels

alias cdp='cd -P'                       # cdp:    Follow physical directory

#alias -- /='cd /'                       # TODO: Invalid expression
alias abs='cd /'                        # abs:    Go to root of disk
alias root='cd /'                       # root:   Go to root of disk

alias ~='cd ~'                          # ~:      Go Home

alias -- -='cd -'                       # -:      Go back to the previous cd
alias cd-='cd -'                        # cd-:    Go back to the previous cd
alias bk='cd -'                         # bk:     Go back to the previous cd
alias undo='cd -'                       # undo:   Go back to the previous cd

alias dt='cd ~/Desktop/'                # dt:     Go to Desktop
alias dc='cd ~/Documents/'              # dc:     Go to Documents
alias dl='cd ~/Downloads/'              # dl:     Go to Downloads
alias dr='cd ~/Dropbox/'                # dr:     Go to Dropbox

alias blogging='cd ~/Dropbox/code/github/sho-repos/shoichiaizawa.github.io'
alias sandbox='cd ~/Dropbox/code/examples-code/sandbox' # sandbox: Go to sandbox
alias drafts='cd ~/Dropbox/code/examples-code/sandbox/drafts'

# -----
# mkdir
# -----

alias mkdir='mkdir -p'                  # Enable to create intermediate directories
alias md='mkdir -p'                     # md:     Make a directory
mcd () { mkdir -p "$1" && cd "$1"; }    # mcd:    Makes new Dir and jumps inside

# -------------
# Time and Date
# -------------

alias nowtime='date +"%T"'
alias nowdate='date +"%Y-%m-%d"'
alias week='date +%V'
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# ------------------
# pbcopy and pbpaste
# ------------------

alias pbc=pbcopy
alias pbp=pbpaste
alias pbsort='pbpaste | sort | pbcopy' # Sort the items in the clipboard and copy them in the clipboard back
alias pbs=pbsort

# -------
# history
# -------

alias h='history'
alias histg='history | grep'
alias hgrep=histg

# Function: rmh -- remove the most recent previous command from command history
#
# This helps the user to maintain his/her command history clean without invalid
# commands
#
rmh() {
  export HISTTIMEFORMAT=''
  local lastcmdhist=$(history 1)
  local lastcmdnum=$(echo "${lastcmdhist}" | awk '{print $1}')
  local lastcmd=$(echo "${lastcmdhist}" | cut -d ' ' -f 3-)
  if [ -n "${lastcmdnum}" ]; then
    history -d "$lastcmdnum"
    echo "Removed the last command: ${lastcmd}"
  fi
  export HISTTIMEFORMAT='%F %T -- '
}
alias rmh=rmh

# ----
# grep
# ----

alias igrep='grep -i'             # igrep:  case-insensitive grep
# Colored grep:
# http://www.jefftk.com/p/colored-grep
alias grey-grep="GREP_COLOR='1;30' grep --color=always"
alias red-grep="GREP_COLOR='1;31' grep --color=always"
alias green-grep="GREP_COLOR='1;32' grep --color=always"
alias yellow-grep="GREP_COLOR='1;33' grep --color=always"
alias blue-grep="GREP_COLOR='1;34' grep --color=always"
alias magenta-grep="GREP_COLOR='1;35' grep --color=always"
alias cyan-grep="GREP_COLOR='1;36' grep --color=always"
alias white-grep="GREP_COLOR='1;37' grep --color=always"

# Search a string in an entire directory
# Usage: dgrep 'pattern' '/directory/to/be/searched'
# See: https://stackoverflow.com/q/16956810/1334728
alias dgrep='grep -nrw $1 $2'

# ----------
# ssh-keygen
# ----------

alias ssh-rsa3072='ssh-keygen -t rsa -b 3072 -C'
alias ssh-rsa4096='ssh-keygen -t rsa -b 4096 -C'
alias ssh-check-key='ssh-keygen -l -f' #Show fingerprint of specified public key file
alias ssh-change-pass='ssh-keygen -p -f' # Change the passphrase of a private key

# ------------------------
# Edit configuration files
# ------------------------

alias ebashrc='vim ~/.bashrc'           # Edit .bashrc from anywhere
alias evimrc='vim ~/.vimrc'             # Edit .vimrc from anywhere
alias eemacs='emacs ~/.emacs.d/init.el' # Edit init.el from anywhere
alias egitconf='vim ~/.gitconfig'       # Edit .gitconfig from anywhere
alias egitig='vim ~/.gitignore_global'  # Edit .gitignore_global from anywhere
alias etmuxconf='vim ~/.tmux.conf'      # Edit .tmux.conf from anywhere
alias eapache="vim $(brew --prefix)/etc/httpd/httpd.conf"
                                        # Edit httpd.conf from anywhere
alias enginx="vim $(brew --prefix)/etc/nginx/nginx.conf"
                                        # Edit nginx.conf from anywhere
alias emacos='vim ~/.macos'             # Edit .macos from anywhere

# XXX: find a better way to achieve the following command
if type php > /dev/null 2>&1; then
  alias ephp="vim $(brew --prefix)/etc/php/$(php -v | sed -n '1p' | sed 's/[^0-9.]*\([0-9.]\{3\}\).*/\1/')/php.ini"
fi

# --------------
# mute and unmute
# --------------

alias mute="osascript -e 'set volume output muted true'"
alias unmute="osascript -e 'set volume output muted false'"

# -------
# Editors
# -------

alias vi=vim
alias edit=vim
alias e=vim
alias emacs="emacs -nw"

# -----
# macOS
# -----

alias purge='sudo purge'
alias f='open -a Finder ./'       # Open the current working directory in Finder

# Airport CLI alias
airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'
if [[ -x "${airport}" ]]; then
  alias airport="${airport}"
fi
unset airport

# Function: cdf -- cd to the path of the front Finder window
# http://brettterpstra.com/2013/02/09/quick-tip-jumping-to-the-finder-location-in-terminal/

cdf() {
  target=$(osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)')
  if [ "$target" != "" ]; then
    cd "$target"; pwd
  else
    echo 'No Finder window found' >&2
  fi
}

# trash:  Moves a file to the macOS trash
trash () { command mv "$@" ~/.Trash ; }

# ql:    Opens any file in macOS Quick Look Preview
ql () { qlmanage -p "$*" >& /dev/null; }

# ----------------
# Typo corrections
# ----------------

alias ehco=echo                   # ehco is now echo
alias eixt=exit                   # eixt is now exit
alias oepn=open                   # oepn is now open
alias pdw=pwd                     # pdw is now pwd
alias quit=exit                   # quit is now exit

# ----------
# Networking
# ----------

alias myip='dig +short myip.opendns.com @resolver1.opendns.com' # myip:         Public facing IP Address
alias localip0='ipconfig getifaddr en0'                         # localip0:     Internal IP Address for en0
alias localip1='ipconfig getifaddr en1'                         # localip1:     Internal IP Address for en1
alias netcons='lsof -i'                                         # netcons:      Show all open TCP/IP sockets
alias flushdns='dscacheutil -flushcache'                        # flushdns:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'                         # lsock:        Display open sockets
alias lsockudp='sudo /usr/sbin/lsof -nP | grep UDP'             # lsockudp:     Display only open UDP sockets
alias lsocktcp='sudo /usr/sbin/lsof -nP | grep TCP'             # lsocktcp:     Display only open TCP sockets
alias ipinfo0='ipconfig getpacket en0'                          # ipinfo0:      Get info on connections for en0
alias ipinfo1='ipconfig getpacket en1'                          # ipinfo1:      Get info on connections for en1
alias openports='sudo lsof -i | grep LISTEN'                    # openports:    All listening connections
alias showblocked='sudo ipfw list'                              # showblocked:  All ipfw rules inc/ blocked IPs

# Function: ii - display useful host related information

ii() {
  echo -e "\nYou are logged on ${RED}$HOST"
  echo -e "\nAdditional information:$NC " ; uname -a
  echo -e "\n${RED}Users logged on:$NC " ; w -h
  echo -e "\n${RED}Current date :$NC " ; date
  echo -e "\n${RED}Machine stats :$NC " ; uptime
  echo -e "\n${RED}Current network location :$NC " ; scselect
  echo -e "\n${RED}Public facing IP Address :$NC " ; myip
  #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
  echo
}

# -------------------------------------------------------------------
# showHidden:   Show hidden files in Finder
# hideHidden:   Hide hidden files in Finder
# -------------------------------------------------------------------

alias showHidden='defaults write com.apple.finder AppleShowAllFiles -bool TRUE && killall Finder'
alias hideHidden='defaults write com.apple.finder AppleShowAllFiles -bool FALSE && killall Finder'

# -------------------------------------------------------------------
# menubarHide:   Hide Menubar (OS X 10.11.x+)
# menubarShow:   Show Menubar (OS X 10.11.x+)
# -------------------------------------------------------------------

alias menubarHide='defaults write NSGlobalDomain _HIHideMenuBar -bool true && killall Finder'
alias menubarShow='defaults write NSGlobalDomain _HIHideMenuBar -bool false && killall Finder'

# ----------------------------------------------------
# Hide/show all desktop icons (useful when presenting)
# ----------------------------------------------------

alias hidedesktop='defaults write com.apple.finder CreateDesktop -bool false && killall Finder'
alias showdesktop='defaults write com.apple.finder CreateDesktop -bool true && killall Finder'

# ------------------------------------------------
# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
# ------------------------------------------------

alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# --------------------------------------------------------------------
# Empty the Trash on all mounted volumes and the main HDD.
# Also, clear Apple’s System Logs to improve shell startup speed.
# Finally, clear download history from quarantine. https://mths.be/bum
# --------------------------------------------------------------------

alias empty-trash=" \
  sudo rm -rfv /Volumes/*/.Trashes; \
  sudo rm -rfv ~/.Trash; \
  sudo rm -rfv /private/var/log/asl/*.asl; \
  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'; \
  mkdir ~/.Trash
"

# --------------------------
# Homebrew and Homebrew Cask
# --------------------------

if [ -e ~/.homebrew-github-api-token ]; then
  export HOMEBREW_GITHUB_API_TOKEN=$(cat ~/.homebrew-github-api-token)
fi

if type _brew_cask > /dev/null 2>&1; then
  cask() { brew "$@" --cask; }
  alias cask=cask
fi

# ------
# Docker
# ------

# Docker Machine

if type docker-machine > /dev/null 2>&1; then
  alias dm='docker-machine'
  alias dmenv='eval "$(docker-machine env)"'
fi

if type _docker_machine &> /dev/null && [ -f $(brew --prefix)/etc/bash_completion.d/docker-machine.bash ]; then
  complete -o default -o nospace -F _docker_machine dm
fi

# Docker

if type docker > /dev/null 2>&1; then
  alias d='docker'
  if [ -f $(brew --prefix)/etc/bash_completion.d/docker ]; then
    complete -o default -o nospace -F _docker d
  fi

  alias dpa='docker container ls -a'
  alias dclean='docker rm -v $(docker ps -aq -f status=exited)'
  alias drmi='docker image rm -f $(docker image ls -aq)'

  db() { docker build -t "$1" .; }
  alias db=db
  alias dbuild=db

  da() { docker start $1 && docker attach $1; }
  if type _docker_start > /dev/null 2>&1 && [ -f $(brew --prefix)/etc/bash_completion.d/docker ]; then
    complete -o default -o nospace -F _docker_start da
  fi

  dexec() { docker exec -it $1 /bin/sh; }
  alias dexec=dexec
  if type _docker_exec > /dev/null 2>&1 && [ -f $(brew --prefix)/etc/bash_completion.d/docker ]; then
    complete -o default -o nospace -F _docker_exec dexec
  fi

  # NOTE: This might not work as expected; fix it if necessary
  drun() { docker run -it -d $1; }
  alias drun=drun
  if type _docker_run > /dev/null 2>&1 && [ -f $(brew --prefix)/etc/bash_completion.d/docker ]; then
    complete -o default -o nospace -F _docker_run drun
  fi
fi

daliases() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

# -------------
# Google Chrome
# -------------

[ -d "/Applications/Google Chrome.app" ] && \
alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'

[ -d "/Applications/Google Chrome Canary.app" ] && \
alias canary='/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary'

# ------------
# To be sorted
# ------------

alias cl='clear'                        # c:      Clear terminal display
alias which='type --all'                 # which:  Find executables
alias where=which

# alias path='echo -e ${PATH//:/\\n}'     # path:   Echo all executable Paths
# alias path='echo $PATH | tr -s ":" "\n"' # path: Same as above
# Display a neatly formatted executable paths
path() {
local red="\033[0;31m"
local green="\033[0;32m"
local yellow="\033[0;33m"
local blue="\033[1;34m"
local magenta="\033[0;35m"
local cyan="\033[0;36m"
local reset_color="\033[0m"
  echo $PATH | tr ":" "\n" | \
    awk "{ sub(\"/usr\",   \"$green/usr$reset_color\"); \
           sub(\"/bin\",   \"$blue/bin$reset_color\"); \
           sub(\"/sbin\",  \"$magenta/sbin$reset_color\"); \
           sub(\"/opt\",   \"$cyan/opt$reset_color\"); \
           sub(\"/local\", \"$yellow/local$reset_color\"); \
           sub(\"/Users\", \"$red/Users$reset_color\"); \
           sub(\"/home\", \"$red/home$reset_color\"); \
           print }"
}

alias please='sudo !!'
alias jobs='jobs -l'

alias g='git'
if type hub > /dev/null 2>&1; then
  alias git=hub
fi

# Deploying a subfolder to GitHub Pages
# See: https://gist.github.com/cobyism/4730490
# Courtesy of Coby Chapple (@cobyism)
alias gh-pages-deploy='git subtree push --prefix dist origin gh-pages'

# This creates a backup file for Atom packages installed by the user
# To install, run: `apm install --packages-file packages.list`
# NOTE: For an alternative method, use `atom star|stars|starred`
if type apm > /dev/null 2>&1; then
  alias apm-pkg-backup="apm list --installed --bare | cut -d '@' -f1 | grep -v '^$' >| ~/.atom/packages.list"
fi

alias reload='exec $SHELL -l'     # Invoke the default shell ($SHELL) as a login shell

alias rm~='rm *~'
alias rm.~='rm .*~'
alias rmpyc='find . -type f -name "*.pyc" -ls -delete'

# Recursively delete `.DS_Store` files
alias cleanup-ds-store="find . -type f -name '*.DS_Store' -ls -delete"

if type colordiff > /dev/null 2>&1; then
  alias diff='colordiff'            # Requires `brew install colordiff`
fi

# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map='xargs -n1'

if type composer > /dev/null 2>&1; then
  alias composer-pkg-versions='composer global show --installed'  # short for -i
fi

alias meteor-upgrade='curl https://install.meteor.com/ | sh'

# How to deploy a static website to Heroku:
# https://gist.github.com/wh1tney/2ad13aa5fbdd83f6a489
# TODO: Add conditionals for composer.json and index.php if necessary
heroku-static-test() {
  touch composer.json index.php
  echo '{}' >| composer.json
  echo '<?php include_once("home.html"); ?>' >| index.php
  if [ -f index.html ]; then
    mv index.html home.html
  else
    touch home.html
  fi
}

# file: /usr/libexec/java_home@ -> /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home
# Running the `java_home` results in printing out the current Java JDK version
if type java > /dev/null 2>&1; then
  alias java-versions='/usr/libexec/java_home -V'
fi

alias unclutter-gh="vim ~/Dropbox/sho/backup/unclutter/unclutter-notes/'Unclutter Note 2015-12-28 01.08.18.txt'"

# Function: toggleiTerm -- Toggle iTerm Dock icon {{{1

# https://gist.github.com/CrazyApi/5377685
# Add this to your terminal profile

function toggleiTerm() {
  pb='/usr/libexec/PlistBuddy'
  iTerm='/Applications/iTerm.app/Contents/Info.plist'
  echo "Do you wish to hide iTerm in Dock?"
  select ync in "Hide" "Show" "Cancel"; do
    case $ync in
      'Hide' )
        $pb -c "Add :LSUIElement bool true" $iTerm
        echo "relaunch iTerm to take effectives"
        break
        ;;
      'Show' )
        $pb -c "Delete :LSUIElement" $iTerm
        echo "run killall 'iTerm' to exit, and then relaunch it"
        break
        ;;
      'Cancel' )
        break
        ;;
    esac
  done
}

# }}}1
# Function: man -- Coloured man {{{1
#
# http://www.cyberciti.biz/faq/linux-unix-colored-man-pages-with-less-command/
#
# ANSI escape code:
#
# | SGR parameters      | Text colour | Background |
# |---------------------|-------------|------------|
# | 0 reset all         | 30 black    | 40 black   |
# | 1 bright            | 31 red      | 41 red     |
# | 2 dim               | 32 green    | 42 green   |
# | 3 italic            | 33 yellow   | 43 yellow  |
# | 4 underline: single | 34 blue     | 44 blue    |
# | 5 blink: slow       | 35 magenta  | 45 magenta |
# | 6 blink: fast       | 36 cyan     | 46 cyan    |
# | 7 reverse           | 37 white    | 47 white   |
# | 8 hidden            |     ---     |     ---    |
# | many more up to 107 |     ---     |     ---    |
#
# Separate with ";"
#
# Many of SGR (Select Graphic Rendition) parameters are not widely supported.
# See Wikipedia and elsewhere for details:
# https://en.wikipedia.org/wiki/ANSI_escape_code

man() {
  env \
  LESS_TERMCAP_mb=$(printf "\e[1;38;5;166m") \
  LESS_TERMCAP_md=$(printf "\e[1;38;5;166m") \
  LESS_TERMCAP_me=$(printf "\e[0m") \
  LESS_TERMCAP_se=$(printf "\e[0m") \
  LESS_TERMCAP_so=$(printf "\e[1;38;5;0;48;5;136m") \
  LESS_TERMCAP_ue=$(printf "\e[0m") \
  LESS_TERMCAP_us=$(printf "\e[1;38;5;64m") \
  man "$@"
}

# }}}1
# Function: extract -- Extract for common file formats {{{
#
# See: https://github.com/xvoland/Extract/blob/master/extract.sh
#
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")

function extract {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
  else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
        case "${n%,}" in
          *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                       tar xvf "$n"       ;;
          *.lzma)      unlzma ./"$n"      ;;
          *.bz2)       bunzip2 ./"$n"     ;;
          *.rar)       unrar x -ad ./"$n" ;;
          *.gz)        gunzip ./"$n"      ;;
          *.zip)       unzip ./"$n"       ;;
          *.z)         uncompress ./"$n"  ;;
          *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                       7z x ./"$n"        ;;
          *.xz)        unxz ./"$n"        ;;
          *.exe)       cabextract ./"$n"  ;;
          *.cpio)      cpio -id < ./"$n"  ;;
          *)
                       echo "extract: '$n' - unknown archive method"
                       return 1
                       ;;
        esac
      else
        echo "'$n' - file does not exist"
        return 1
      fi
    done
  fi
}

IFS=$SAVEIFS

# }}}

################################################################################
# rbenv                                                                        #
################################################################################

if type rbenv > /dev/null 2>&1; then
  eval "$(rbenv init -)";
fi

################################################################################
# nvm                                                                          #
################################################################################

# NOTE:
# Install `nvm` manually;
# See details at https://github.com/nvm-sh/nvm#manual-install

# Function: `nvm-upgrade-init`
#
# Call the `nvm-upgrade` function.
# Please unset this function immediately after applied.
#
nvm-upgrade-init() {

  # Function: `nvm-upgrade`
  #
  # Upgrade `nvm` while preserving the both current and old working directory
  # paths information
  #
  nvm-upgrade() {
    if [[ ! -f $NVM_DIR/.git/shallow ]]; then
      local tmp_currentpwd=$(pwd)
      local tmp_oldpwd=$OLDPWD
      (
        cd "$NVM_DIR"
        git fetch --tags origin
        git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
      ) && \. "$NVM_DIR/nvm.sh"
      cd $tmp_currentpwd
      OLDPWD=$tmp_oldpwd
      unset tmp_currentpwd
      unset tmp_oldpwd
    else
      # TODO: find out if there is any way to compare the currently installed
      #       nvm version and the newer available version
      echo "Your nvm is installed via the install script!"
      echo "Please check if the newer version is available at:"
      echo "https://github.com/nvm-sh/nvm#install-script"
    fi
  }

}

# Case 1: `nvm` is installed via an official installation method (ideal)
#
# This block loads:
#
# - `nvm`, installed either via:
#   1. manual Git full clone; or
#   2. install script (shallow clone)
# - Bash completion script for nvm
# - A `nvm-upgrade` function
#
if [[ -d $HOME/.nvm/.git ]]; then
  # Set an environment variable for nvm root directory
  export NVM_DIR="$HOME/.nvm"

  # Create a `current` symlink to the active Node.js version every time
  # the `nvm use` command is run
  export NVM_SYMLINK_CURRENT=true

  # Automatically source `nvm` upon login
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Activate `bash_completion`
  [ -r $NVM_DIR/bash_completion ] && \. $NVM_DIR/bash_completion

  # Set the `nvm-upgrade` function and unset its initialisation function
  nvm-upgrade-init && unset -f nvm-upgrade-init

# Case 2: `nvm` is installed via Homebrew (non-official)
#
# This block loads:
#
# - `nvm` (Homebrew version)
# - a warning message regarding Homebrew installation
#
# NOTE: Homebrew installation is not supported by the nvm developers.
# See: https://github.com/nvm-sh/nvm#important-notes
#
elif [[ -d $(brew --prefix nvm) ]]; then
  if [[ ! -d $NVM_DIR ]]; then
    echo -e "The \`.nvm\` directory has been created at $HOME\n"
    mkdir $NVM_DIR
  fi
  source $(brew --prefix nvm)/nvm.sh
  echo -e "\033[0;33mWarning: \033[0mYour nvm is installed via Homebrew."
  echo "The Homebrew version of nvm is not officially supported by the nvm developers."
  echo "While you can continue using the Homebrew version, please consider installing"
  echo "nvm via one of the official installation methods; see the details at:"
  echo "  https://github.com/nvm-sh/nvm#installation"

# Case 3: `nvm` is not installed
#
# This block loads:
#
# - `nvm-install` function, once nvm is installed it is unset
#
else
  # Function: `nvm-install`
  #
  # Install `nvm` and activate its Bash completion script.
  #
  nvm-install() {
    export NVM_DIR="$HOME/.nvm" && export NVM_SYMLINK_CURRENT=true && (
      git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
      cd "$NVM_DIR"
      git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
    ) && \. "$NVM_DIR/nvm.sh" \
      && [[ -r $NVM_DIR/bash_completion ]] && \. $NVM_DIR/bash_completion

    # Set the `nvm-upgrade` function and unset its initialisation function
    nvm-upgrade-init && unset -f nvm-upgrade-init

    unset -f nvm-install

    echo -e "\n--------------------------------------------------------------------------------\n"
    echo "Woohoo! nvm has been installed successfully!"
    echo "The \`nvm-install\` command has been unset."
    echo "Use the \`nvm-upgrade\` command to upgrade nvm."
  }
fi

# Aliases to list installed npm packages, globally and locally
if type npm > /dev/null 2>&1; then
  source <(npm completion)

  alias npm-gpkg-versions='npm list -g --depth=0'
  alias npm-pkg-versions='npm list --depth=0'
fi

################################################################################
# pnpm                                                                         #
################################################################################

# pnpm completion
# See: https://pnpm.io/completion
#
# tabtab source for packages
# uninstall by removing these lines
[ -f ~/.config/tabtab/bash/__tabtab.bash ] && . ~/.config/tabtab/bash/__tabtab.bash || true

################################################################################
# pyenv & pyenv-virtualenv                                                     #
################################################################################

# Function: `pyenv-git-upgrade-init`
#
# Call the `pyenv-git-upgrade` function.
# Please unset this function immediately after applied.
#
pyenv-git-upgrade-init() {
  # Function: `pyenv-git-upgrade`
  #
  # Upgrade `pyenv` while preserving the both current and old working directory
  # paths information.
  #
  pyenv-git-upgrade() {
    if [[ -d $PYENV_ROOT/.git ]]; then
      local tmp_currentpwd=$(pwd)
      local tmp_oldpwd=$OLDPWD
      cd $PYENV_ROOT
      git pull origin master
      cd $tmp_currentpwd
      OLDPWD=$tmp_oldpwd
      unset tmp_currentpwd
      unset tmp_oldpwd
    else
      brew upgrade pyenv
    fi
  }
}

# Function: `pyenv-virtualenv-git-upgrade-init`
#
# Call the `pyenv-virtualenv-git-upgrade` function.
# Please unset this function immediately after applied.
#
pyenv-virtualenv-git-upgrade-init() {
  # Function: `pyenv-virtualenv-git-upgrade`
  #
  # Upgrade `pyenv-virtualenv` while preserving the both current and old
  # working directory paths information
  #
  pyenv-virtualenv-git-upgrade() {
    if [[ -d $PYENV_ROOT/plugins/pyenv-virtualenv ]]; then
      local tmp_currentpwd=$(pwd)
      local tmp_oldpwd=$OLDPWD
      cd $PYENV_VIRTUALENV_ROOT
      git pull
      cd $tmp_currentpwd
      OLDPWD=$tmp_oldpwd
      unset tmp_currentpwd
      unset tmp_oldpwd
    else
      brew upgrade pyenv-virtualenv
    fi
  }
}

# Case 1: `pyenv` is installed via (1) basic Git checkout or (2) Homebrew
#
# This block loads:
#
# - `pyenv`, installed either via:
#   1. the basic Git checkout; or
#   2. Homebrew
# - Bash completion scripts for `pyenv`
# - a `pyenv-git-upgrade` function
#
# See:
# - https://github.com/pyenv/pyenv#basic-github-checkout
# - https://github.com/pyenv/pyenv#homebrew-on-mac-os-x
#
if [[ -d $HOME/.pyenv/.git ]] || type pyenv > /dev/null 2>&1; then
  # Set an environment variable for pyenv root directory
  export PYENV_ROOT="$HOME/.pyenv"

  # Set PATH for the pyenv executable
  [[ -d $PYENV_ROOT/.git ]] && export PATH="$PYENV_ROOT/bin:$PATH"

  # Enable shims and autocompletion
  type pyenv > /dev/null 2>&1 && eval "$(pyenv init -)";

  # Set the `pyenv-git-upgrade` function and unset its initialisation function
  pyenv-git-upgrade-init && unset -f pyenv-git-upgrade-init

  if [[ -d $PYENV_ROOT/plugins/pyenv-virtualenv ]] || type pyenv-virtualenv-init > /dev/null 2>&1; then
    # Set an environment variable for pyenv-virtualenv root directory only when
    # it is installed via Git
    [[ -d $PYENV_ROOT/plugins/pyenv-virtualenv ]] && export PYENV_VIRTUALENV_ROOT="$PYENV_ROOT/plugins/pyenv-virtualenv"

    # Disable prompt changing for pyenv
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1

    # Automatically load pyenv-virtualenv upon login
    [[ -d $PYENV_ROOT/plugins/pyenv-virtualenv ]] || type pyenv-virtualenv-init > /dev/null 2>&1 && eval "$(pyenv virtualenv-init -)";

    # Set the `pyenv-virtualenv-git-upgrade` function and unset its initialisation function
    pyenv-virtualenv-git-upgrade-init && unset -f pyenv-virtualenv-git-upgrade-init

  else
    # Function: `pyenv-virtualenv-git-install`
    #
    # Install `pyenv-virtualenv`.
    #
    pyenv-virtualenv-git-install() {
      if [[ -d $PYENV_ROOT/plugins ]]; then
        export PYENV_VIRTUALENV_ROOT="$PYENV_ROOT/plugins/pyenv-virtualenv"
        git clone https://github.com/pyenv/pyenv-virtualenv.git $PYENV_VIRTUALENV_ROOT
      else
        echo "Install \`pyenv-virtualenv\` via Homebrew..."
        brew install pyenv-virtualenv
      fi

      # Disable prompt changing for pyenv
      export PYENV_VIRTUALENV_DISABLE_PROMPT=1

      # Automatically load pyenv-virtualenv upon login
      [[ -d $PYENV_VIRTUALENV_ROOT ]] || type pyenv-virtualenv-init > /dev/null 2>&1 && eval "$(pyenv virtualenv-init -)";

      # Set the `pyenv-virtualenv-git-upgrade` function and unset its initialisation function
      pyenv-virtualenv-git-upgrade-init && unset -f pyenv-virtualenv-git-upgrade-init

      # Unset the `pyenv-virtualenv-git-install` function
      unset -f pyenv-virtualenv-git-install

      echo -e "\n--------------------------------------------------------------------------------\n"
      echo "Woohoo! \`pyenv-virtualenv\` has been installed successfully!"
      echo "The \`pyenv-virtualenv-git-install\` command has been unset."
      echo "Use the \`pyenv-virtualenv-git-upgrade\` command to upgrade \`pyenv-virtualenv\`."
    }
  fi

# Case 2: `pyenv` and `pyenv-virtualenv` are not installed
#
# This block loads:
#
# - a `pyenv-git-install` function:
#   - this function will be unset immediately after `pyenv` is installed
# - a `pyenv-virtualenv-git-install` function:
#   - this function will be unset immediately after `pyenv-virtualenv` is installed
#
else
  if [[ ! -d $(brew --prefix pyenv) ]]; then
    # Function: `pyenv-git-install`
    #
    # Install `pyenv` and activate its Bash completion script.
    #
    pyenv-git-install() {
      export PYENV_ROOT="$HOME/.pyenv"

      # TODO: Hack from here.
      # (
      #   [[ -d $PYENV_ROOT ]] && \
      #   echo "Please remove the \`~/.pyenv\` directory before running the \`pyenv-git-install\` function!"
      #   return 0
      # )

      export PATH="$PYENV_ROOT/bin:$PATH"

      git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT && (
        echo -e "\n--------------------------------------------------------------------------------\n"
        echo "Woohoo! \`pyenv\` has been installed successfully!"
        echo "The \`pyenv-git-install\` command has been unset."
        echo "Use the \`pyenv-git-upgrade\` command to upgrade \`pyenv\`."
      )

      # Enable shims and autocompletion
      type pyenv > /dev/null 2>&1 && eval "$(pyenv init -)";

      # Set the `pyenv-git-upgrade` function and unset its initialisation function
      pyenv-git-upgrade-init && unset -f pyenv-git-upgrade-init

      # Unset the `pyenv-git-install` function
      unset -f pyenv-git-install
    }
  fi
fi

if type jupyter > /dev/null 2>&1; then
  alias note='jupyter notebook'
fi

if type pip > /dev/null 2>&1; then
  alias pip-all-upgrade="pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U"
  alias pip-cache-locations='find $(python -c "from pip.locations import USER_CACHE_DIR; print(USER_CACHE_DIR)") -name "*.whl"'
fi

if type pip3 > /dev/null 2>&1; then
  alias pip3-all-upgrade="pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U"
fi

# A workaround to remove error messages when running `brew doctor`
# This occurs when both Homebrew and pyenv are installed
# See: https://github.com/pyenv/pyenv/issues/106
if type brew > /dev/null 2>&1 && type pyenv > /dev/null 2>&1; then
  alias brew="env PATH=${PATH//$(pyenv root)\/shims:/} brew"
fi

# A tentative workaround to suppress the `pyenv: gettext.sh: command not found`
# issue when Anaconda is installed with pyenv
# See: https://github.com/pyenv/pyenv/issues/688#issuecomment-316237422
if type pyenv > /dev/null 2>&1; then
  export GIT_INTERNAL_GETTEXT_TEST_FALLBACKS=1
fi

################################################################################
# Pipenv                                                                       #
################################################################################

# It is more sensible to me if a venv is created at the root of a repository.
if type pipenv > /dev/null 2>&1; then
  export PIPENV_VENV_IN_PROJECT=1
fi

################################################################################
# Alfred                                                                       #
################################################################################

# export HOMEBREW_CASK_OPTS="--appdir=/Applications"
# export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/usr/local/Caskroom"

################################################################################
# thefuck
################################################################################

if type thefuck > /dev/null 2>&1; then
  eval "$(thefuck --alias)";
fi

################################################################################
# Google Cloud SDK                                                             #
################################################################################

# Google Cloud SDK installed via Homebrew Cask
if type _brew_cask > /dev/null 2>&1 && [[ -d $(brew --prefix)/Caskroom/google-cloud-sdk ]]; then
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc"
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc"

  if type fzf > /dev/null 2>&1; then
    # Function: gactivate -- switch between GCP configurations effortlessly
    gactivate() {
      local confname=$(gcloud config configurations list | tail -n +2 | fzf --height 40% --reverse --exit-0 | awk '{print $1}')
      if [ -n "${confname}" ]; then
        gcloud config configurations activate "${confname}"
      fi
    }
    alias gactivate=gactivate

    # Function: gssh -- SSH into a GCE instance effortlessly
    gssh() {
      local vminfo=$(gcloud compute instances list | tail -n +2 | fzf --height 40% --reverse --exit-0)
      local instance_name=$(echo ${vminfo} | awk '{print $1}')
      local zone_name=$(echo ${vminfo} | awk '{print $2}')
      if [ -n "${instance_name}" ] && [ -n "${zone_name}" ]; then
        gcloud compute ssh "${instance_name}" --zone "${zone_name}"
      fi
    }
    alias gssh=gssh
  fi

  if type bq > /dev/null 2>&1; then
    if type jq > /dev/null 2>&1; then
      # Function: bqschema -- show a BigQuery table schema with colours
      #
      # This requires an argument as follows:
      #
      # bq schema []
      #
      bqschema() {
        bq show --schema --format=prettyjson $1 | jq
      }
      alias bqschema=bqschema
    else
      # Show a BigQuery table schema without colours if `jq` is not installed
      alias bqschema="bq show --schema --format=prettyjson $1"
    fi

    # Function: bqtables -- show BigQuery tables in the current GCP project
    bqtables() {
      # get list of tables
      local datasets=$(bq ls "$project:$dataset" | awk '{print $1}' | tail +3)

      # extract into storage
      for dataset in $datasets; do
        echo "${dataset}"
        bq ls --format=pretty $dataset
        echo
      done
    }
    alias bqtables=bqtables
  fi
fi

################################################################################
# direnv
################################################################################

if type direnv > /dev/null 2>&1; then
  eval "$(direnv hook bash)"
fi

################################################################################
# goenv
################################################################################

if [[ -d $HOME/.goenv/.git ]]; then
  export GOENV_ROOT="$HOME/.goenv"
  export PATH="$GOENV_ROOT/bin:$PATH"
  eval "$(goenv init -)"
  export GOPATH=$HOME/.go
  export PATH="$GOROOT/bin:$PATH"
  export PATH="$GOPATH/bin:$PATH"

  [[ -x $GOPATH/bin/gocomplete ]] && complete -C $GOPATH/bin/gocomplete go

  # Function: `goenv-git-upgrade`
  #
  # Upgrade `goenv` while preserving the both current and old working directory
  # paths information.
  #
  goenv-git-upgrade() {
    if [[ -d $GOENV_ROOT/.git ]]; then
      local tmp_currentpwd=$(pwd)
      local old_currentpwd=$OLDPWD
      cd $GOENV_ROOT
      git pull
      cd $tmp_currentpwd
      OLDPWD=$tmp_oldpwd
      unset tmp_currentpwd
      unset tmp_oldpwd
    else
      brew upgrade goenv
    fi
  }
fi

################################################################################
# starship
################################################################################

if type starship > /dev/null 2>&1; then
  if [ "${BASH_VERSINFO[0]}" -gt 4 ] || ([ "${BASH_VERSINFO[0]}" -eq 4 ] && [ "${BASH_VERSINFO[1]}" -ge 1 ]); then
    source <("/usr/local/bin/starship" init bash --print-full-init)
  else
    source /dev/stdin <<<"$("/usr/local/bin/starship" init bash --print-full-init)"
  fi
fi
